
Projeto Roboldinho Gaucho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000005d  00800100  00800100  0000071a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000180  00000000  00000000  0000074a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000fba  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004d0  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000627  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000358  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000088a  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005c3  00000000  00000000  00002f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 35       	cpi	r26, 0x5D	; 93
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	//usartEnableTransmitter();
	//usartStdio();
	//usartInit(9600);
	
	// Configuração dos motores
	motorCfg();
  a6:	0e 94 3e 01 	call	0x27c	; 0x27c <motorCfg>
	
	//ADC CONFIG
	adcReferenceAvcc();
  aa:	4c e7       	ldi	r20, 0x7C	; 124
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	ea 01       	movw	r28, r20
  b0:	88 81       	ld	r24, Y
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	88 83       	st	Y, r24
  b6:	88 81       	ld	r24, Y
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	88 83       	st	Y, r24
  bc:	a7 e5       	ldi	r26, 0x57	; 87
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	8c 91       	ld	r24, X
  c2:	8c 7f       	andi	r24, 0xFC	; 252
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24
	adcClockPrescaler128();
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
  de:	8c 91       	ld	r24, X
  e0:	8c 61       	ori	r24, 0x1C	; 28
  e2:	8c 93       	st	X, r24
	adcEnableAutomaticMode();
  e4:	80 81       	ld	r24, Z
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 83       	st	Z, r24
  ea:	8c 91       	ld	r24, X
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8c 93       	st	X, r24
	adcTriggerTimer1Overflow();
  f0:	8b e7       	ldi	r24, 0x7B	; 123
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ec 01       	movw	r28, r24
  f6:	28 81       	ld	r18, Y
  f8:	24 60       	ori	r18, 0x04	; 4
  fa:	28 83       	st	Y, r18
  fc:	28 81       	ld	r18, Y
  fe:	22 60       	ori	r18, 0x02	; 2
 100:	28 83       	st	Y, r18
 102:	28 81       	ld	r18, Y
 104:	2e 7f       	andi	r18, 0xFE	; 254
 106:	28 83       	st	Y, r18
 108:	8c 91       	ld	r24, X
 10a:	8f 73       	andi	r24, 0x3F	; 63
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8c 93       	st	X, r24
 110:	a8 e5       	ldi	r26, 0x58	; 88
 112:	b1 e0       	ldi	r27, 0x01	; 1
 114:	8c 91       	ld	r24, X
 116:	81 60       	ori	r24, 0x01	; 1
 118:	8c 93       	st	X, r24
	adcSelectChannel(ADC4);
 11a:	ea 01       	movw	r28, r20
 11c:	98 81       	ld	r25, Y
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	94 60       	ori	r25, 0x04	; 4
 122:	98 83       	st	Y, r25
 124:	83 7c       	andi	r24, 0xC3	; 195
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8c 93       	st	X, r24
	adcActivateInterrupt();
 12a:	80 81       	ld	r24, Z
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 83       	st	Z, r24
 130:	a9 e5       	ldi	r26, 0x59	; 89
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	8c 91       	ld	r24, X
 136:	80 62       	ori	r24, 0x20	; 32
 138:	8c 93       	st	X, r24
	adcEnable();
 13a:	90 81       	ld	r25, Z
 13c:	90 68       	ori	r25, 0x80	; 128
 13e:	90 83       	st	Z, r25
 140:	80 61       	ori	r24, 0x10	; 16
 142:	8c 93       	st	X, r24
	
	clrBit(DDRC, PC4);
 144:	3c 98       	cbi	0x07, 4	; 7
	clrBit(DDRC, PC5);
 146:	3d 98       	cbi	0x07, 5	; 7
	clrBit(PORTC, PC4);
 148:	44 98       	cbi	0x08, 4	; 8
	clrBit(PORTC, PC5);
 14a:	45 98       	cbi	0x08, 5	; 8
	
	// Configuração do Timer1
	timer1CTCMode();
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	80 83       	st	Z, r24
 156:	80 81       	ld	r24, Z
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	80 83       	st	Z, r24
 15c:	a0 e8       	ldi	r26, 0x80	; 128
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	8c 91       	ld	r24, X
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	8c 93       	st	X, r24
 166:	8c 91       	ld	r24, X
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	8c 93       	st	X, r24
	timer1ClockPrescaller1024();
 16c:	80 81       	ld	r24, Z
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	80 83       	st	Z, r24
 172:	80 81       	ld	r24, Z
 174:	8d 7f       	andi	r24, 0xFD	; 253
 176:	80 83       	st	Z, r24
 178:	80 81       	ld	r24, Z
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 83       	st	Z, r24
	timer1SetCompareAValue(135);
 17e:	87 e8       	ldi	r24, 0x87	; 135
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 24 01 	call	0x248	; 0x248 <timer1SetCompareAValue>
	timer1DeactivateCompareAInterrupt();
 186:	ef e6       	ldi	r30, 0x6F	; 111
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	80 83       	st	Z, r24
	
	// Configuração do Timer2
	
	sei();
 190:	78 94       	sei
	
	setBit(MOTOR_CONTROL_PORT, MOTOR1_CONTROL_SENTIDO_PIN);
 192:	5b 9a       	sbi	0x0b, 3	; 11
	
    while(1)
    {
		//_delay_ms(1);
		setMotor1Speed(0);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 8e 01 	call	0x31c	; 0x31c <setMotor1Speed>
		setMotor2Speed(0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 9f 01 	call	0x33e	; 0x33e <setMotor2Speed>
 1a4:	f7 cf       	rjmp	.-18     	; 0x194 <main+0xee>

000001a6 <__vector_21>:
		*/
    }
}

ISR(ADC_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	VelocidadeX++;
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	90 91 01 01 	lds	r25, 0x0101
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 01 01 	sts	0x0101, r25
 1c6:	80 93 00 01 	sts	0x0100, r24
	if(curADC == ADC_ADC4)
 1ca:	80 91 02 01 	lds	r24, 0x0102
 1ce:	81 11       	cpse	r24, r1
 1d0:	18 c0       	rjmp	.+48     	; 0x202 <__vector_21+0x5c>
	{
		VelocidadeX = ADC;
 1d2:	80 91 78 00 	lds	r24, 0x0078
 1d6:	90 91 79 00 	lds	r25, 0x0079
 1da:	90 93 01 01 	sts	0x0101, r25
 1de:	80 93 00 01 	sts	0x0100, r24
		adcSelectChannel(ADC5);
 1e2:	ec e7       	ldi	r30, 0x7C	; 124
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 7f       	andi	r24, 0xF0	; 240
 1ea:	85 60       	ori	r24, 0x05	; 5
 1ec:	80 83       	st	Z, r24
 1ee:	e8 e5       	ldi	r30, 0x58	; 88
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	83 7c       	andi	r24, 0xC3	; 195
 1f6:	84 61       	ori	r24, 0x14	; 20
 1f8:	80 83       	st	Z, r24
		curADC = ADC_ADC5;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 02 01 	sts	0x0102, r24
 200:	1a c0       	rjmp	.+52     	; 0x236 <__vector_21+0x90>
	}
	else if(curADC == ADC_ADC5)
 202:	80 91 02 01 	lds	r24, 0x0102
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	b1 f4       	brne	.+44     	; 0x236 <__vector_21+0x90>
	{
		VelocidadeX = ADC;	
 20a:	80 91 78 00 	lds	r24, 0x0078
 20e:	90 91 79 00 	lds	r25, 0x0079
 212:	90 93 01 01 	sts	0x0101, r25
 216:	80 93 00 01 	sts	0x0100, r24
		adcSelectChannel(ADC4);
 21a:	ec e7       	ldi	r30, 0x7C	; 124
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	84 60       	ori	r24, 0x04	; 4
 224:	80 83       	st	Z, r24
 226:	e8 e5       	ldi	r30, 0x58	; 88
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	83 7c       	andi	r24, 0xC3	; 195
 22e:	80 61       	ori	r24, 0x10	; 16
 230:	80 83       	st	Z, r24
		curADC = ADC_ADC4;
 232:	10 92 02 01 	sts	0x0102, r1
	}
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <timer1SetCompareAValue>:
 248:	2f b7       	in	r18, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	90 93 89 00 	sts	0x0089, r25
 250:	80 93 88 00 	sts	0x0088, r24
 254:	2f bf       	out	0x3f, r18	; 63
 256:	08 95       	ret

00000258 <motorCtrlCfg>:
	
}

void motorCtrlCfg()
{
	setBit(MOTOR_CONTROL_DDR, MOTOR1_CONTROL_PWM_PIN);
 258:	55 9a       	sbi	0x0a, 5	; 10
	setBit(MOTOR_CONTROL_DDR, MOTOR2_CONTROL_PWM_PIN);
 25a:	56 9a       	sbi	0x0a, 6	; 10
	setBit(MOTOR_CONTROL_DDR, MOTOR1_CONTROL_SENTIDO_PIN);
 25c:	53 9a       	sbi	0x0a, 3	; 10
	setBit(MOTOR_CONTROL_DDR, MOTOR2_CONTROL_SENTIDO_PIN);
 25e:	54 9a       	sbi	0x0a, 4	; 10
	
	clrBit(MOTOR_CONTROL_PORT, MOTOR1_CONTROL_PWM_PIN);
 260:	5d 98       	cbi	0x0b, 5	; 11
	clrBit(MOTOR_CONTROL_PORT, MOTOR2_CONTROL_PWM_PIN);
 262:	5e 98       	cbi	0x0b, 6	; 11
	clrBit(MOTOR_CONTROL_PORT, MOTOR1_CONTROL_SENTIDO_PIN);
 264:	5b 98       	cbi	0x0b, 3	; 11
	clrBit(MOTOR_CONTROL_PORT, MOTOR2_CONTROL_SENTIDO_PIN);
 266:	5c 98       	cbi	0x0b, 4	; 11
 268:	08 95       	ret

0000026a <motorDataCfg>:
}

void motorDataCfg()
{
	clrBit(MOTOR_DATA_DDR, MOTOR1_DATA_E0_PIN);
 26a:	38 98       	cbi	0x07, 0	; 7
	clrBit(MOTOR_DATA_DDR, MOTOR1_DATA_E1_PIN);
 26c:	39 98       	cbi	0x07, 1	; 7
	clrBit(MOTOR_DATA_DDR, MOTOR2_DATA_E0_PIN);
 26e:	3a 98       	cbi	0x07, 2	; 7
	clrBit(MOTOR_DATA_DDR, MOTOR2_DATA_E1_PIN);
 270:	3c 98       	cbi	0x07, 4	; 7
	
	clrBit(MOTOR_DATA_PORT, MOTOR1_DATA_E0_PIN);
 272:	40 98       	cbi	0x08, 0	; 8
	clrBit(MOTOR_DATA_PORT, MOTOR1_DATA_E1_PIN);
 274:	41 98       	cbi	0x08, 1	; 8
	clrBit(MOTOR_DATA_PORT, MOTOR2_DATA_E0_PIN);
 276:	42 98       	cbi	0x08, 2	; 8
	clrBit(MOTOR_DATA_PORT, MOTOR2_DATA_E1_PIN);
 278:	44 98       	cbi	0x08, 4	; 8
 27a:	08 95       	ret

0000027c <motorCfg>:
#include "Motor.h"

void motorCfg()
{
	// Configuração dos motores
	motorCtrlCfg();
 27c:	0e 94 2c 01 	call	0x258	; 0x258 <motorCtrlCfg>
	motorDataCfg();
 280:	0e 94 35 01 	call	0x26a	; 0x26a <motorDataCfg>
	
	// Configuração do Timer0 - ~1kHz
	timer0FastPWMMaxMode();
 284:	85 b5       	in	r24, 0x25	; 37
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	85 bd       	out	0x25, r24	; 37
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	84 bd       	out	0x24, r24	; 36
 290:	84 b5       	in	r24, 0x24	; 36
 292:	81 60       	ori	r24, 0x01	; 1
 294:	84 bd       	out	0x24, r24	; 36
	timer0ClockPrescaller64();
 296:	85 b5       	in	r24, 0x25	; 37
 298:	8b 7f       	andi	r24, 0xFB	; 251
 29a:	85 bd       	out	0x25, r24	; 37
 29c:	85 b5       	in	r24, 0x25	; 37
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	85 bd       	out	0x25, r24	; 37
 2a2:	85 b5       	in	r24, 0x25	; 37
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	85 bd       	out	0x25, r24	; 37
	timer0OC0ANonInvertedMode();
 2a8:	84 b5       	in	r24, 0x24	; 36
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	84 bd       	out	0x24, r24	; 36
 2ae:	84 b5       	in	r24, 0x24	; 36
 2b0:	8f 7b       	andi	r24, 0xBF	; 191
 2b2:	84 bd       	out	0x24, r24	; 36
	timer0OC0BNonInvertedMode();
 2b4:	84 b5       	in	r24, 0x24	; 36
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	84 bd       	out	0x24, r24	; 36
 2ba:	84 b5       	in	r24, 0x24	; 36
 2bc:	8f 7e       	andi	r24, 0xEF	; 239
 2be:	84 bd       	out	0x24, r24	; 36
	timer0SetCompareAValue(0);
 2c0:	17 bc       	out	0x27, r1	; 39
	timer0SetCompareBValue(0);
 2c2:	18 bc       	out	0x28, r1	; 40
	timer0ActivateCompareAInterrupt();
 2c4:	ee e6       	ldi	r30, 0x6E	; 110
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	80 83       	st	Z, r24
	timer0ActivateCompareBInterrupt();
 2ce:	80 81       	ld	r24, Z
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	80 83       	st	Z, r24
	timer0ActivateOverflowInterrupt();
 2d4:	80 81       	ld	r24, Z
 2d6:	81 60       	ori	r24, 0x01	; 1
 2d8:	80 83       	st	Z, r24
	
	timeSinceStart = 0;
 2da:	10 92 03 01 	sts	0x0103, r1
 2de:	10 92 04 01 	sts	0x0104, r1
 2e2:	10 92 05 01 	sts	0x0105, r1
 2e6:	10 92 06 01 	sts	0x0106, r1
	motor1Info.timeSinceRead = 0;
 2ea:	10 92 0f 01 	sts	0x010F, r1
 2ee:	10 92 10 01 	sts	0x0110, r1
 2f2:	10 92 11 01 	sts	0x0111, r1
 2f6:	10 92 12 01 	sts	0x0112, r1
	motor2Info.timeSinceRead = 0;
 2fa:	10 92 1b 01 	sts	0x011B, r1
 2fe:	10 92 1c 01 	sts	0x011C, r1
 302:	10 92 1d 01 	sts	0x011D, r1
 306:	10 92 1e 01 	sts	0x011E, r1
	
	motor1Info.anguloAtual = 0;
 30a:	10 92 08 01 	sts	0x0108, r1
 30e:	10 92 07 01 	sts	0x0107, r1
	motor2Info.anguloAtual = 0;
 312:	10 92 14 01 	sts	0x0114, r1
 316:	10 92 13 01 	sts	0x0113, r1
 31a:	08 95       	ret

0000031c <setMotor1Speed>:
	clrBit(MOTOR_DATA_PORT, MOTOR2_DATA_E1_PIN);
}

void setMotor1Speed(int Speed)
{
	if((Speed >= 0) && (Speed <= 255))
 31c:	28 2f       	mov	r18, r24
 31e:	39 2f       	mov	r19, r25
 320:	2f 3f       	cpi	r18, 0xFF	; 255
 322:	31 05       	cpc	r19, r1
 324:	09 f0       	breq	.+2      	; 0x328 <setMotor1Speed+0xc>
 326:	10 f4       	brcc	.+4      	; 0x32c <setMotor1Speed+0x10>
	{
		clrBit(MOTOR_CONTROL_PORT, MOTOR1_CONTROL_SENTIDO_PIN);
 328:	5b 98       	cbi	0x0b, 3	; 11
		timer0SetCompareBValue(Speed);
 32a:	88 bd       	out	0x28, r24	; 40
	}
	
	if((Speed < 0) && (Speed >= -255))
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	2f 3f       	cpi	r18, 0xFF	; 255
 332:	31 05       	cpc	r19, r1
 334:	18 f4       	brcc	.+6      	; 0x33c <setMotor1Speed+0x20>
	{
		setBit(MOTOR_CONTROL_PORT, MOTOR1_CONTROL_SENTIDO_PIN);
 336:	5b 9a       	sbi	0x0b, 3	; 11
		timer0SetCompareBValue(255 + Speed);
 338:	81 50       	subi	r24, 0x01	; 1
 33a:	88 bd       	out	0x28, r24	; 40
 33c:	08 95       	ret

0000033e <setMotor2Speed>:
	}
}

void setMotor2Speed(int Speed)
{
	if((Speed >= 0) && (Speed <= 255))
 33e:	28 2f       	mov	r18, r24
 340:	39 2f       	mov	r19, r25
 342:	2f 3f       	cpi	r18, 0xFF	; 255
 344:	31 05       	cpc	r19, r1
 346:	09 f0       	breq	.+2      	; 0x34a <setMotor2Speed+0xc>
 348:	10 f4       	brcc	.+4      	; 0x34e <setMotor2Speed+0x10>
	{
		clrBit(MOTOR_CONTROL_PORT, MOTOR2_CONTROL_SENTIDO_PIN);
 34a:	5c 98       	cbi	0x0b, 4	; 11
		timer0SetCompareAValue(Speed);
 34c:	87 bd       	out	0x27, r24	; 39
	}
	
	if((Speed < 0) && (Speed >= -255))
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	2f 3f       	cpi	r18, 0xFF	; 255
 354:	31 05       	cpc	r19, r1
 356:	18 f4       	brcc	.+6      	; 0x35e <setMotor2Speed+0x20>
	{
		setBit(MOTOR_CONTROL_PORT, MOTOR2_CONTROL_SENTIDO_PIN);
 358:	5c 9a       	sbi	0x0b, 4	; 11
		timer0SetCompareAValue(255 + Speed);
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	87 bd       	out	0x27, r24	; 39
 35e:	08 95       	ret

00000360 <__vector_4>:
{
	
}

ISR(PCINT1_vect)
{
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
	if(motor1Info.enc0Atual != isBitSet(MOTOR_DATA_PIN, MOTOR1_DATA_E0_PIN))
 36e:	80 91 0a 01 	lds	r24, 0x010A
 372:	96 b1       	in	r25, 0x06	; 6
 374:	91 70       	andi	r25, 0x01	; 1
 376:	89 17       	cp	r24, r25
 378:	31 f0       	breq	.+12     	; 0x386 <__vector_4+0x26>
	{
		motor1Info.enc0Anterior = motor1Info.enc0Atual;
 37a:	80 93 09 01 	sts	0x0109, r24
		motor1Info.enc0Atual = isBitSet(MOTOR_DATA_PIN, MOTOR1_DATA_E0_PIN);
 37e:	86 b1       	in	r24, 0x06	; 6
 380:	81 70       	andi	r24, 0x01	; 1
 382:	80 93 0a 01 	sts	0x010A, r24
		
		calcSpeedMotor1();
	}
	
	if(motor1Info.enc1Atual != isBitSet(MOTOR_DATA_PIN, MOTOR1_DATA_E1_PIN))
 386:	80 91 0c 01 	lds	r24, 0x010C
 38a:	96 b1       	in	r25, 0x06	; 6
 38c:	96 95       	lsr	r25
 38e:	91 70       	andi	r25, 0x01	; 1
 390:	98 17       	cp	r25, r24
 392:	39 f0       	breq	.+14     	; 0x3a2 <__vector_4+0x42>
	{
		motor1Info.enc1Anterior = motor1Info.enc1Atual;
 394:	80 93 0b 01 	sts	0x010B, r24
		motor1Info.enc1Atual = isBitSet(MOTOR_DATA_PIN, MOTOR1_DATA_E1_PIN);
 398:	86 b1       	in	r24, 0x06	; 6
 39a:	86 95       	lsr	r24
 39c:	81 70       	andi	r24, 0x01	; 1
 39e:	80 93 0c 01 	sts	0x010C, r24
		
		calcSpeedMotor1();
	}
	
	if(motor2Info.enc0Atual != isBitSet(MOTOR_DATA_PIN, MOTOR2_DATA_E0_PIN))
 3a2:	80 91 16 01 	lds	r24, 0x0116
 3a6:	96 b1       	in	r25, 0x06	; 6
 3a8:	92 fb       	bst	r25, 2
 3aa:	99 27       	eor	r25, r25
 3ac:	90 f9       	bld	r25, 0
 3ae:	98 17       	cp	r25, r24
 3b0:	41 f0       	breq	.+16     	; 0x3c2 <__vector_4+0x62>
	{
		motor2Info.enc0Anterior = motor2Info.enc0Atual;
 3b2:	80 93 15 01 	sts	0x0115, r24
		motor2Info.enc0Atual = isBitSet(MOTOR_DATA_PIN, MOTOR2_DATA_E0_PIN);
 3b6:	86 b1       	in	r24, 0x06	; 6
 3b8:	82 fb       	bst	r24, 2
 3ba:	88 27       	eor	r24, r24
 3bc:	80 f9       	bld	r24, 0
 3be:	80 93 16 01 	sts	0x0116, r24
		
		calcSpeedMotor2();
	}
	
	if(motor2Info.enc1Atual != isBitSet(MOTOR_DATA_PIN, MOTOR2_DATA_E1_PIN))
 3c2:	80 91 18 01 	lds	r24, 0x0118
 3c6:	96 b1       	in	r25, 0x06	; 6
 3c8:	92 95       	swap	r25
 3ca:	91 70       	andi	r25, 0x01	; 1
 3cc:	98 17       	cp	r25, r24
 3ce:	39 f0       	breq	.+14     	; 0x3de <__vector_4+0x7e>
	{
		motor2Info.enc1Anterior = motor2Info.enc1Atual;
 3d0:	80 93 17 01 	sts	0x0117, r24
		motor2Info.enc1Atual = isBitSet(MOTOR_DATA_PIN, MOTOR2_DATA_E1_PIN);
 3d4:	86 b1       	in	r24, 0x06	; 6
 3d6:	82 95       	swap	r24
 3d8:	81 70       	andi	r24, 0x01	; 1
 3da:	80 93 18 01 	sts	0x0118, r24
		
		calcSpeedMotor2();
	}
}
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	timeSinceStart += 1.024;
 40e:	60 91 03 01 	lds	r22, 0x0103
 412:	70 91 04 01 	lds	r23, 0x0104
 416:	80 91 05 01 	lds	r24, 0x0105
 41a:	90 91 06 01 	lds	r25, 0x0106
 41e:	0e 94 c3 02 	call	0x586	; 0x586 <__floatunsisf>
 422:	2f e6       	ldi	r18, 0x6F	; 111
 424:	32 e1       	ldi	r19, 0x12	; 18
 426:	43 e8       	ldi	r20, 0x83	; 131
 428:	5f e3       	ldi	r21, 0x3F	; 63
 42a:	0e 94 33 02 	call	0x466	; 0x466 <__addsf3>
 42e:	0e 94 97 02 	call	0x52e	; 0x52e <__fixunssfsi>
 432:	60 93 03 01 	sts	0x0103, r22
 436:	70 93 04 01 	sts	0x0104, r23
 43a:	80 93 05 01 	sts	0x0105, r24
 43e:	90 93 06 01 	sts	0x0106, r25
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__subsf3>:
 464:	50 58       	subi	r21, 0x80	; 128

00000466 <__addsf3>:
 466:	bb 27       	eor	r27, r27
 468:	aa 27       	eor	r26, r26
 46a:	0e d0       	rcall	.+28     	; 0x488 <__addsf3x>
 46c:	e0 c0       	rjmp	.+448    	; 0x62e <__fp_round>
 46e:	d1 d0       	rcall	.+418    	; 0x612 <__fp_pscA>
 470:	30 f0       	brcs	.+12     	; 0x47e <__addsf3+0x18>
 472:	d6 d0       	rcall	.+428    	; 0x620 <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__addsf3+0x18>
 476:	31 f4       	brne	.+12     	; 0x484 <__addsf3+0x1e>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	11 f4       	brne	.+4      	; 0x480 <__addsf3+0x1a>
 47c:	1e f4       	brtc	.+6      	; 0x484 <__addsf3+0x1e>
 47e:	c6 c0       	rjmp	.+396    	; 0x60c <__fp_nan>
 480:	0e f4       	brtc	.+2      	; 0x484 <__addsf3+0x1e>
 482:	e0 95       	com	r30
 484:	e7 fb       	bst	r30, 7
 486:	bc c0       	rjmp	.+376    	; 0x600 <__fp_inf>

00000488 <__addsf3x>:
 488:	e9 2f       	mov	r30, r25
 48a:	e2 d0       	rcall	.+452    	; 0x650 <__fp_split3>
 48c:	80 f3       	brcs	.-32     	; 0x46e <__addsf3+0x8>
 48e:	ba 17       	cp	r27, r26
 490:	62 07       	cpc	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	95 07       	cpc	r25, r21
 498:	18 f0       	brcs	.+6      	; 0x4a0 <__addsf3x+0x18>
 49a:	71 f4       	brne	.+28     	; 0x4b8 <__addsf3x+0x30>
 49c:	9e f5       	brtc	.+102    	; 0x504 <__addsf3x+0x7c>
 49e:	fa c0       	rjmp	.+500    	; 0x694 <__fp_zero>
 4a0:	0e f4       	brtc	.+2      	; 0x4a4 <__addsf3x+0x1c>
 4a2:	e0 95       	com	r30
 4a4:	0b 2e       	mov	r0, r27
 4a6:	ba 2f       	mov	r27, r26
 4a8:	a0 2d       	mov	r26, r0
 4aa:	0b 01       	movw	r0, r22
 4ac:	b9 01       	movw	r22, r18
 4ae:	90 01       	movw	r18, r0
 4b0:	0c 01       	movw	r0, r24
 4b2:	ca 01       	movw	r24, r20
 4b4:	a0 01       	movw	r20, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	ff 27       	eor	r31, r31
 4ba:	59 1b       	sub	r21, r25
 4bc:	99 f0       	breq	.+38     	; 0x4e4 <__addsf3x+0x5c>
 4be:	59 3f       	cpi	r21, 0xF9	; 249
 4c0:	50 f4       	brcc	.+20     	; 0x4d6 <__addsf3x+0x4e>
 4c2:	50 3e       	cpi	r21, 0xE0	; 224
 4c4:	68 f1       	brcs	.+90     	; 0x520 <__addsf3x+0x98>
 4c6:	1a 16       	cp	r1, r26
 4c8:	f0 40       	sbci	r31, 0x00	; 0
 4ca:	a2 2f       	mov	r26, r18
 4cc:	23 2f       	mov	r18, r19
 4ce:	34 2f       	mov	r19, r20
 4d0:	44 27       	eor	r20, r20
 4d2:	58 5f       	subi	r21, 0xF8	; 248
 4d4:	f3 cf       	rjmp	.-26     	; 0x4bc <__addsf3x+0x34>
 4d6:	46 95       	lsr	r20
 4d8:	37 95       	ror	r19
 4da:	27 95       	ror	r18
 4dc:	a7 95       	ror	r26
 4de:	f0 40       	sbci	r31, 0x00	; 0
 4e0:	53 95       	inc	r21
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__addsf3x+0x4e>
 4e4:	7e f4       	brtc	.+30     	; 0x504 <__addsf3x+0x7c>
 4e6:	1f 16       	cp	r1, r31
 4e8:	ba 0b       	sbc	r27, r26
 4ea:	62 0b       	sbc	r22, r18
 4ec:	73 0b       	sbc	r23, r19
 4ee:	84 0b       	sbc	r24, r20
 4f0:	ba f0       	brmi	.+46     	; 0x520 <__addsf3x+0x98>
 4f2:	91 50       	subi	r25, 0x01	; 1
 4f4:	a1 f0       	breq	.+40     	; 0x51e <__addsf3x+0x96>
 4f6:	ff 0f       	add	r31, r31
 4f8:	bb 1f       	adc	r27, r27
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	c2 f7       	brpl	.-16     	; 0x4f2 <__addsf3x+0x6a>
 502:	0e c0       	rjmp	.+28     	; 0x520 <__addsf3x+0x98>
 504:	ba 0f       	add	r27, r26
 506:	62 1f       	adc	r22, r18
 508:	73 1f       	adc	r23, r19
 50a:	84 1f       	adc	r24, r20
 50c:	48 f4       	brcc	.+18     	; 0x520 <__addsf3x+0x98>
 50e:	87 95       	ror	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f7 95       	ror	r31
 518:	9e 3f       	cpi	r25, 0xFE	; 254
 51a:	08 f0       	brcs	.+2      	; 0x51e <__addsf3x+0x96>
 51c:	b3 cf       	rjmp	.-154    	; 0x484 <__addsf3+0x1e>
 51e:	93 95       	inc	r25
 520:	88 0f       	add	r24, r24
 522:	08 f0       	brcs	.+2      	; 0x526 <__addsf3x+0x9e>
 524:	99 27       	eor	r25, r25
 526:	ee 0f       	add	r30, r30
 528:	97 95       	ror	r25
 52a:	87 95       	ror	r24
 52c:	08 95       	ret

0000052e <__fixunssfsi>:
 52e:	98 d0       	rcall	.+304    	; 0x660 <__fp_splitA>
 530:	88 f0       	brcs	.+34     	; 0x554 <__fixunssfsi+0x26>
 532:	9f 57       	subi	r25, 0x7F	; 127
 534:	90 f0       	brcs	.+36     	; 0x55a <__fixunssfsi+0x2c>
 536:	b9 2f       	mov	r27, r25
 538:	99 27       	eor	r25, r25
 53a:	b7 51       	subi	r27, 0x17	; 23
 53c:	a0 f0       	brcs	.+40     	; 0x566 <__fixunssfsi+0x38>
 53e:	d1 f0       	breq	.+52     	; 0x574 <__fixunssfsi+0x46>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	1a f0       	brmi	.+6      	; 0x550 <__fixunssfsi+0x22>
 54a:	ba 95       	dec	r27
 54c:	c9 f7       	brne	.-14     	; 0x540 <__fixunssfsi+0x12>
 54e:	12 c0       	rjmp	.+36     	; 0x574 <__fixunssfsi+0x46>
 550:	b1 30       	cpi	r27, 0x01	; 1
 552:	81 f0       	breq	.+32     	; 0x574 <__fixunssfsi+0x46>
 554:	9f d0       	rcall	.+318    	; 0x694 <__fp_zero>
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	08 95       	ret
 55a:	9c c0       	rjmp	.+312    	; 0x694 <__fp_zero>
 55c:	67 2f       	mov	r22, r23
 55e:	78 2f       	mov	r23, r24
 560:	88 27       	eor	r24, r24
 562:	b8 5f       	subi	r27, 0xF8	; 248
 564:	39 f0       	breq	.+14     	; 0x574 <__fixunssfsi+0x46>
 566:	b9 3f       	cpi	r27, 0xF9	; 249
 568:	cc f3       	brlt	.-14     	; 0x55c <__fixunssfsi+0x2e>
 56a:	86 95       	lsr	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b3 95       	inc	r27
 572:	d9 f7       	brne	.-10     	; 0x56a <__fixunssfsi+0x3c>
 574:	3e f4       	brtc	.+14     	; 0x584 <__fixunssfsi+0x56>
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__floatunsisf>:
 586:	e8 94       	clt
 588:	09 c0       	rjmp	.+18     	; 0x59c <__floatsisf+0x12>

0000058a <__floatsisf>:
 58a:	97 fb       	bst	r25, 7
 58c:	3e f4       	brtc	.+14     	; 0x59c <__floatsisf+0x12>
 58e:	90 95       	com	r25
 590:	80 95       	com	r24
 592:	70 95       	com	r23
 594:	61 95       	neg	r22
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	99 23       	and	r25, r25
 59e:	a9 f0       	breq	.+42     	; 0x5ca <__floatsisf+0x40>
 5a0:	f9 2f       	mov	r31, r25
 5a2:	96 e9       	ldi	r25, 0x96	; 150
 5a4:	bb 27       	eor	r27, r27
 5a6:	93 95       	inc	r25
 5a8:	f6 95       	lsr	r31
 5aa:	87 95       	ror	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f1 11       	cpse	r31, r1
 5b4:	f8 cf       	rjmp	.-16     	; 0x5a6 <__floatsisf+0x1c>
 5b6:	fa f4       	brpl	.+62     	; 0x5f6 <__floatsisf+0x6c>
 5b8:	bb 0f       	add	r27, r27
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__floatsisf+0x36>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	1b c0       	rjmp	.+54     	; 0x5f6 <__floatsisf+0x6c>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <__floatsisf+0x6c>
 5ca:	88 23       	and	r24, r24
 5cc:	11 f0       	breq	.+4      	; 0x5d2 <__floatsisf+0x48>
 5ce:	96 e9       	ldi	r25, 0x96	; 150
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <__floatsisf+0x6a>
 5d2:	77 23       	and	r23, r23
 5d4:	21 f0       	breq	.+8      	; 0x5de <__floatsisf+0x54>
 5d6:	9e e8       	ldi	r25, 0x8E	; 142
 5d8:	87 2f       	mov	r24, r23
 5da:	76 2f       	mov	r23, r22
 5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__floatsisf+0x5e>
 5de:	66 23       	and	r22, r22
 5e0:	71 f0       	breq	.+28     	; 0x5fe <__floatsisf+0x74>
 5e2:	96 e8       	ldi	r25, 0x86	; 134
 5e4:	86 2f       	mov	r24, r22
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	2a f0       	brmi	.+10     	; 0x5f6 <__floatsisf+0x6c>
 5ec:	9a 95       	dec	r25
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	da f7       	brpl	.-10     	; 0x5ec <__floatsisf+0x62>
 5f6:	88 0f       	add	r24, r24
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	97 f9       	bld	r25, 7
 5fe:	08 95       	ret

00000600 <__fp_inf>:
 600:	97 f9       	bld	r25, 7
 602:	9f 67       	ori	r25, 0x7F	; 127
 604:	80 e8       	ldi	r24, 0x80	; 128
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	08 95       	ret

0000060c <__fp_nan>:
 60c:	9f ef       	ldi	r25, 0xFF	; 255
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	08 95       	ret

00000612 <__fp_pscA>:
 612:	00 24       	eor	r0, r0
 614:	0a 94       	dec	r0
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	09 06       	cpc	r0, r25
 61e:	08 95       	ret

00000620 <__fp_pscB>:
 620:	00 24       	eor	r0, r0
 622:	0a 94       	dec	r0
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	05 06       	cpc	r0, r21
 62c:	08 95       	ret

0000062e <__fp_round>:
 62e:	09 2e       	mov	r0, r25
 630:	03 94       	inc	r0
 632:	00 0c       	add	r0, r0
 634:	11 f4       	brne	.+4      	; 0x63a <__fp_round+0xc>
 636:	88 23       	and	r24, r24
 638:	52 f0       	brmi	.+20     	; 0x64e <__fp_round+0x20>
 63a:	bb 0f       	add	r27, r27
 63c:	40 f4       	brcc	.+16     	; 0x64e <__fp_round+0x20>
 63e:	bf 2b       	or	r27, r31
 640:	11 f4       	brne	.+4      	; 0x646 <__fp_round+0x18>
 642:	60 ff       	sbrs	r22, 0
 644:	04 c0       	rjmp	.+8      	; 0x64e <__fp_round+0x20>
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	8f 4f       	sbci	r24, 0xFF	; 255
 64c:	9f 4f       	sbci	r25, 0xFF	; 255
 64e:	08 95       	ret

00000650 <__fp_split3>:
 650:	57 fd       	sbrc	r21, 7
 652:	90 58       	subi	r25, 0x80	; 128
 654:	44 0f       	add	r20, r20
 656:	55 1f       	adc	r21, r21
 658:	59 f0       	breq	.+22     	; 0x670 <__fp_splitA+0x10>
 65a:	5f 3f       	cpi	r21, 0xFF	; 255
 65c:	71 f0       	breq	.+28     	; 0x67a <__fp_splitA+0x1a>
 65e:	47 95       	ror	r20

00000660 <__fp_splitA>:
 660:	88 0f       	add	r24, r24
 662:	97 fb       	bst	r25, 7
 664:	99 1f       	adc	r25, r25
 666:	61 f0       	breq	.+24     	; 0x680 <__fp_splitA+0x20>
 668:	9f 3f       	cpi	r25, 0xFF	; 255
 66a:	79 f0       	breq	.+30     	; 0x68a <__fp_splitA+0x2a>
 66c:	87 95       	ror	r24
 66e:	08 95       	ret
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	14 06       	cpc	r1, r20
 676:	55 1f       	adc	r21, r21
 678:	f2 cf       	rjmp	.-28     	; 0x65e <__fp_split3+0xe>
 67a:	46 95       	lsr	r20
 67c:	f1 df       	rcall	.-30     	; 0x660 <__fp_splitA>
 67e:	08 c0       	rjmp	.+16     	; 0x690 <__fp_splitA+0x30>
 680:	16 16       	cp	r1, r22
 682:	17 06       	cpc	r1, r23
 684:	18 06       	cpc	r1, r24
 686:	99 1f       	adc	r25, r25
 688:	f1 cf       	rjmp	.-30     	; 0x66c <__fp_splitA+0xc>
 68a:	86 95       	lsr	r24
 68c:	71 05       	cpc	r23, r1
 68e:	61 05       	cpc	r22, r1
 690:	08 94       	sec
 692:	08 95       	ret

00000694 <__fp_zero>:
 694:	e8 94       	clt

00000696 <__fp_szero>:
 696:	bb 27       	eor	r27, r27
 698:	66 27       	eor	r22, r22
 69a:	77 27       	eor	r23, r23
 69c:	cb 01       	movw	r24, r22
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
