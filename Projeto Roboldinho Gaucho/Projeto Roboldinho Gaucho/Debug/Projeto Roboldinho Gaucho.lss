
Projeto Roboldinho Gaucho.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000261  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012b  00000000  00000000  00000411  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000010c  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ec  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000019e  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// Definição das Variaveis Globais

int main(void)
{
	// Configuração dos motores
	motorCtrlCfg(MOTOR_CONTROL_DDR, MOTOR_CONTROL_PORT, MOTOR1_CONTROL_PWM_PIN, MOTOR2_CONTROL_PWM_PIN);
  a6:	6b b1       	in	r22, 0x0b	; 11
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	26 e0       	ldi	r18, 0x06	; 6
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	45 e0       	ldi	r20, 0x05	; 5
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 6e 00 	call	0xdc	; 0xdc <motorCtrlCfg>
	motorDataCfg(MOTOR_CONTROL_DDR, MOTOR_CONTROL_PORT, MOTOR1_DATA_E0_PIN, MOTOR1_DATA_E1_PIN, MOTOR2_DATA_E0_PIN, MOTOR2_DATA_E1_PIN);
  ba:	6b b1       	in	r22, 0x0b	; 11
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	68 94       	set
  c2:	ee 24       	eor	r14, r14
  c4:	e2 f8       	bld	r14, 2
  c6:	f1 2c       	mov	r15, r1
  c8:	02 e0       	ldi	r16, 0x02	; 2
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 6f 00 	call	0xde	; 0xde <motorDataCfg>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x34>

000000dc <motorCtrlCfg>:
 */ 

#include "Motor.h"

void motorCtrlCfg(uint8 motorDDR, uint8 motorPort,uint8 motorPWM1,uint8 motorPWM2)
{
  dc:	08 95       	ret

000000de <motorDataCfg>:
	clrBit(motorPort, motorPWM1);
	clrBit(motorPort, motorPWM2);
}

void motorDataCfg(uint8 motorDDR, uint8 motorPort,uint8 motor1Encoder0,uint8 motor1Encoder1,uint8 motor2Encoder0,uint8 motor2Encoder2)
{
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
